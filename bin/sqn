# #!/apps/perl/perls/perl-5.16.0/bin/perl -w
# #!/usr/bin/perl -w
use strict;
use Sys::Hostname;
use File::Basename;
use Cwd;
use Getopt::Long;


my %nb_abrevs = (
'misc' => 'misc',
'apt' => 'aplysia',
'apn' => 'aplysia2',
'pb' => 'pleurobrachia',
'sandbox' => 'sandbox',
'genomes' => 'genomes',
'sponges' => 'porifera',
'nb1' => 'nb1',
'molluscs' => 'molluscs',
'snails' => 'gastropoda',
'secr' => 'secretoryMolecules',
'verts' => 'vertebrates',
'squid' => 'cephalopods',
'combs' => 'ctenophora',
    );

my %cmd_abrevs = (
'ba' => 'list_best_annotations_for_pid',
'users' => 'list_users',
'perms' => 'list_permissions',
'allp' => 'list_num_seqs(nonzero)_for_all_projs',
'all0p' => 'list_all_projs_with_no_seqs',
'pd' => 'list_project_directory',
'pdo' => 'list_project_directory_sorted_by_name',
'pn' => 'get_proj_name_for_pid',
'uid' => 'get_user_id_for_user_name',
'st' => 'show_tables',
'all' => 'dump_proj_dir',
'alln' => 'dump_proj_dir_where_fields_missing',
'dt' => 'describe_table',
'aa' => 'dump_annotation_alignments_both_sources',
'aa1' => 'dump_annotation_alignments_source1',
'aa1c' => 'dump_annotation_alignments_count_source1',
'aa2c' => 'dump_annotation_alignments_count_source2',
'aaid' => 'list_annot_id_source1_given_pid',
'stats' => 'stats_summary',
'star' => 'select_*_from_arg1(table)_where_arg2=pid_or_0_limit_arg3',
'sh' => 'select_*_from_sorted_homology_where_project_id_arg1_limit 30',
'shc1' => 'select_count_*_from_sorted_homology_where_project_id_arg1_source1',
'shc2' => 'select_count_*_from_sorted_homology_where_project_id_arg1_source2',
'sources' => 'select_id_name_from_annotation_sources',
'namechange' => 'arg1:pid_arg2:new_name',
    );

my ($nb_abrev, $query, $arg1, $arg2, $arg3, $arg4) = @ARGV;
if ((not defined $query) || (not defined $nb_abrev)) {
    print "\nUsage: $0 <nb_abrev> <cmd> <arg1 optional>  <arg2 optional> <arg3_optional>\n";

   while( my( $key, $value ) = each %nb_abrevs ){
	print "$key\t $value\n";
   }
   print "\n";
   while( my( $key, $value ) = each %cmd_abrevs ){
	print "$key\t $value\n";
   }


    exit 0;
}

my $nb_name;
if( exists($nb_abrevs{$nb_abrev} ) ){
    $nb_name = "nb_".$nb_abrevs{$nb_abrev};
    print "nb_name: $nb_name\n";
} else {
    print "\nINVALID NB_ABREV: $nb_abrev    here are the valid ones\n\n";
    print "NB_abrev  NB_name\n";
    while( my( $key, $value ) = each %nb_abrevs ){
	print "$key\t $value\n";
    }
    print "\n";
    exit 0;
}

# my $end =  " | mysql -u moroz_lab --password=Whitney2011 --database=moroz_lab -vvv -t";
# mysql -u nb --password=q8yqJ6zk --database=nb_aplysia -h db1.ufhpc
my $tend =  " | mysql -u nb --password=q8yqJ6zk -h db1.ufhpc --database=$nb_name";
my $end = $tend;

if ($query eq 'st') {
  my $cmd = "echo show tables" . $end;
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'pd') {
  my $cmd = "echo select projectID,project_name from project_directory order by projectID" . $end;
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'ba') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }

  my $cmd = "echo \"select annot, eval from best_annotations where project_id = $arg1\"" . $end;
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'users') {
  my $cmd = "echo \"select * from users\"" . $end;
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}
if ($query eq 'perms') {
  my $cmd = "echo \"select * from permissions\"" . $end;
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'pdo') {
  my $cmd = "echo select projectID,project_name from project_directory order by project_name" . $end;
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'sources') {
  my $cmd = "echo select id,name from annotation_sources" . $end;
  # print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'dt') {
    if (not defined $arg1) {
	print "need arg1 = table_name\n";
	exit 0;
    }
  my $cmd = "echo \"describe $arg1\"" . $end;
  # print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'aa') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }
  my $cmd = "echo \"select projectID,source from annotation_alignments join sb_catalog on annotation_alignments.sb_id > sb_catalog.begin and annotation_alignments.sb_id < sb_catalog.end and projectID = $arg1 and (source = 2 or source = 1) limit 20\"" . $end;
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'aa1') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }
  my $cmd = "echo \"select projectID,source from annotation_alignments join sb_catalog on annotation_alignments.sb_id > sb_catalog.begin and annotation_alignments.sb_id < sb_catalog.end and projectID = $arg1 and source = 1 limit 20\"" . $end;
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'aa1c') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }
  my $cmd = "echo \"select  count(*) from annotation_alignments join sb_catalog on annotation_alignments.sb_id > sb_catalog.begin and annotation_alignments.sb_id < sb_catalog.end and projectID = $arg1 and source = 1\"" . $tend;
#    print "$cmd\n";
    print "ALIGNS_NR: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'aa2c') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }
  my $cmd = "echo \"select  count(*) from annotation_alignments join sb_catalog on annotation_alignments.sb_id > sb_catalog.begin and annotation_alignments.sb_id < sb_catalog.end and projectID = $arg1 and source = 2\"" . $tend;
#    print "$cmd\n";
    print "ALIGNS_SW: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'star') {
    if ((not defined $arg1) || (not defined $arg2) || (not defined $arg3)) {
	print "need   arg1 = table   arg2 = pid (0 if NA)   arg3 = num_rows\n";
	exit 0;
    }
    if ($arg2 == 0) {$arg2 = ""; }
    else { $arg2 = "where projectID = $arg2"; }
  my $cmd = "echo \"select * from $arg1 $arg2 limit $arg3\"" . $end;
   print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'sh') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }
  my $cmd = "echo \"select * from sorted_homology where project_id = $arg1 limit 30\"" . $end;
  # print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'shc1') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }
  my $cmd = "echo \"select count(*) from sorted_homology where project_id = $arg1 and source = 1\"" . $end;
#  print "$cmd\n";
    print "NRs: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'shc2') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }
  my $cmd = "echo \"select count(*) from sorted_homology where project_id = $arg1 and source = 2\"" . $end;
#   print "$cmd\n";
    print "SWPs: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'pid') {
    if (not defined $arg1) {
	print "need arg1 = project_name\n";
	exit 0;
    }
  my $cmd = "echo \"select projectID,project_name from project_directory where project_name = \'$arg1\'\"" . $end;
  # print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'pn') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }
  my $cmd = "echo \"select projectID,project_name from project_directory where projectID = \'$arg1\'\"" . $tend;
#  print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'uid') {
    if (not defined $arg1) {
	print "need arg1 = user_name\n";
	exit 0;
    }
  my $cmd = "echo \"select user_id from users where user_name = \'$arg1\'\"" . $tend;
#  print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}


if ($query eq 'stats') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }
    print "\n";
  my $table = $arg1 . "_sequences";


  my $cmd = "echo \"select projectID,project_name from project_directory where projectID = \'$arg1\'\"" . $tend;
#  print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

  $cmd = "echo \"select count(*) from $table \"" . $end;
#  print "$cmd\n";
  print "Total Sequences: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

  $cmd = "echo \"select count(*)  from kegg_annotations where project_id = \'$arg1\'\"" . $tend;
#  print "$cmd\n";
    print "KEGG: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

  $cmd = "echo \"select count(*) from go_categories where project_id = \'$arg1\'\"" . $tend;
#  print "$cmd\n";
    print "GO: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
  
  $cmd = "echo \"select count(*) from pfam_annotations where project_id = \'$arg1\'\"" . $tend;
#  print "$cmd\n";
    print "PFAM: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

  $cmd = "echo \"select count(*) from pfam_domain_counts where project_id = \'$arg1\'\"" . $tend;
#  print "$cmd\n";
    print "PFAM_domain_counts: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

  $cmd = "echo \"select max(abundance) from $table\"" . $tend;
#  print "$cmd\n";
    print "QUANTIF: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }


  $cmd = "echo \"select count(*) from sorted_homology where project_id = $arg1 and source = 1\"" . $end;
#  print "$cmd\n";
    print "Total NR hits: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

  $cmd = "echo \"select count(*) from sorted_homology where project_id = $arg1 and source = 2\"" . $end;
#   print "$cmd\n";
    print "Total SP hits: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

    $cmd = "echo \"select count(distinct sb_id) from sorted_homology where source = 1 and project_id = $arg1 and sort_id = 1\"" . $end;
#   print "$cmd\n";
    print "seqs with NR hits: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

    $cmd = "echo \"select count(distinct sb_id) from sorted_homology where source = 2 and project_id = $arg1 and sort_id = 1\"" . $end;
#   print "$cmd\n";
    print "seqs with SW hits: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

  $cmd = "echo \"select  count(*) from annotation_alignments join sb_catalog on annotation_alignments.sb_id > sb_catalog.begin and annotation_alignments.sb_id < sb_catalog.end and projectID = $arg1 and source = 1\"" . $tend;
#    print "$cmd\n";
    print "ALIGNS_NR: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

  $cmd = "echo \"select  count(*) from annotation_alignments join sb_catalog on annotation_alignments.sb_id > sb_catalog.begin and annotation_alignments.sb_id < sb_catalog.end and projectID = $arg1 and source = 2\"" . $tend;
#    print "$cmd\n";
    print "ALIGNS_SW: ";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

  $cmd = "ssh moroz\@pubapps1 /home/moroz/autonomics/bin/sdb /data/neurobase/nb.databases/" . $nb_name . "/" . $arg1 . "/*.fas";
  print "$cmd\n";
  system ($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }

}

if ($query eq 'aaid') {
    if (not defined $arg1) {
	print "need arg1 = pid\n";
	exit 0;
    }

  my $cmd = "echo \"select annotation_id from annotation_alignments join sb_catalog on annotation_alignments.sb_id > sb_catalog.begin and annotation_alignments.sb_id < sb_catalog.end and source = 1 and projectID = \'$arg1\'\"" . $tend;
#  print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'all') {
  my $cmd = "echo \"select projectID,project_name,go,kegg,pfam,quantification,blast_nr,blast_swissprot from project_directory\"" . $tend;
#  print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'alln') {
  my $cmd = "echo \"select projectID,project_name,go,kegg,pfam,quantification,blast_nr,blast_swissprot from project_directory where go='N' or kegg='N' or pfam='N' or quantification = 'N' or blast_nr='N' or blast_swissprot='N'\"" . $tend;
#  print "$cmd\n";
  system($cmd);
  if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'newuser') {
    if ((not defined $arg1) || (not defined $arg2) || (not defined $arg3)) {
	print "need   arg1 = user_nam   arg2 = pass_wd   arg3 = persons_name   optional arg4 = email\n";
	exit 0;
    }
    if (not defined $arg4) { $arg4 = ""; }
    my $cmd = "echo \"insert into users (user_name,password,name,email) values (\'$arg1\',\'$arg2\',\'$arg3\',\'$arg4\')\"" . $tend;
    print "$cmd\n";
    system($cmd);
    if ( $? ) { die "Command failed: $cmd: $!"; }

    $cmd = "echo \"INSERT INTO permissions SET  project_id = -1, user_id = (select user_id from users where user_name = \'$arg1\')\"" . $tend;
    print "$cmd\n";
    system($cmd);
    if ( $? ) { die "Command failed: $cmd: $!"; }
 
}
# select * from project_directory into outfile '/home/oem/args.txt' columns terminated by '\t';
#  INSERT INTO permissions SET  project_id = -1, user_id = (select user_id from users where user_name = $arg1)

if ($query eq 'namechange') {
    if ((not defined $arg1) || (not defined $arg2)) {
	print "need   arg1 = pid  arg2 = newName\n";
	exit 0;
    }
    my $cmd = "echo \"update project_directory set project_name = \'$arg2\' where projectID = \'$arg1\'\"" . $tend;
    print "$cmd\n";
    system($cmd);
    if ( $? ) { die "Command failed: $cmd: $!"; }
}

if ($query eq 'allp') {
    my $cmd = "echo \"SELECT project_name, projectID, num_AA_seqs, num_NT_seqs FROM project_directory WHERE (num_AA_seqs != 0) OR (num_NT_seqs != 0)\"" . $tend;
    print "$cmd\n";
    system($cmd);
    if ( $? ) { die "Command failed: $cmd: $!"; }
}
if ($query eq 'all0p') {
    my $cmd = "echo \"SELECT project_name, projectID, num_AA_seqs, num_NT_seqs FROM project_directory WHERE (num_AA_seqs = 0) AND (num_NT_seqs = 0)\"" . $tend;
    print "$cmd\n";
    system($cmd);
    if ( $? ) { die "Command failed: $cmd: $!"; }
}
