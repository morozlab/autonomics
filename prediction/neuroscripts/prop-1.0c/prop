#! /bin/tcsh -f

###############################################################################
# FILE:		prop	(ProPeptide Prediction Server)
# VERSION: 	1.0b
# DATE:		Januari 16, 2004
# AUTHORS:	Peter Duckert, peterd@cbs.dtu.dk
# 		Nikolaj Blom, nikob@cbs.dtu.dk
# 
# 		Center for Biological Sequence Analysis
# 		BioCentrum-DTU
# 		Technical University of Denmark
# 		Building 208
# 		DK-2800 Lyngby  Denmark
# 
# 
# Exit codes:	 0		OK
# 		-1		AWK, GNUPLOT or PPM2GIF not found
# 		-2		input file not found
# 		-3		no sequences found in input file
###############################################################################
#
# UPGRADE	1.0b to 1.0c	K. Rapacki, April 2005, minor debugging


###############################################################################
#	GENERAL SETTINGS, CUSTOMIZE
###############################################################################

# full path to ProP directory
setenv	PROPHOME	/srv/data2/pipeline/prediction/neuroscripts/prop-1.0c

# determine platform (do not change this unless you don't have 'uname'!)
set	SYSTEM		= `uname -s`

# configure auxiliary software (see installation instructions)
if (( $SYSTEM == "IRIX" ) || ( $SYSTEM == "IRIX64" )) then # typical IRIX

   setenv AWK /usr/freeware/bin/gawk
   setenv ECHO /sbin/echo
   setenv GNUPLOT /usr/freeware/bin/gnuplot
   setenv PPM2GIF /usr/freeware/bin/ppmtogif
   setenv SIGNALP /usr/cbs/bio/bin/signalp

else if ( $SYSTEM == "Linux" ) then             # typical Linux

   setenv AWK /usr/bin/gawk
   setenv ECHO "/bin/echo -e"	
   setenv GNUPLOT /usr/bin/gnuplot		# /usr/local/bin/gnuplot-3.7
   setenv PPM2GIF /usr/bin/ppmtogif
   setenv SIGNALP /usr/cbs/bio/bin/signalp

else                                            # edit to suit your UNIX

   setenv AWK /bin/nawk
   setenv ECHO /usr/bin/echo
   setenv GNUPLOT /usr/bin/gnuplot
   setenv PPM2GIF /usr/bin/ppmtogif
   setenv SIGNALP /usr/cbs/bio/bin/signalp

endif

###############################################################################
#	OTHER SETTINGS: NOTHING SHOULD NEED CHANGING BELOW THIS LINE!
###############################################################################

setenv	LANG		C			# else GAWK will fail ...

setenv	PROPBIN		$PROPHOME/bin
setenv	PROPTMP		$PROPHOME/tmp/$$
setenv	PROPTXT		$PROPHOME/etc
setenv	PROPETC		$PROPHOME/etc
setenv	PROPHOW		$PROPHOME/how
setenv	PROPSYN		$PROPHOME/syn

setenv	HOW98		$PROPHOW/how98_$SYSTEM

setenv	WWWOUT		/usr/opt/www/pub/CBS/services/ProP-1.0/tmp/$$

set	f_opt				# obsolete option, now default
set	infile		= ()		# use stdin if no file specified
set 	propversion 	= "ProP v.1.0b"

###############################################################################
# handle command-line options 
###############################################################################

set infile = ()
foreach w ($*)
   switch ($w)
     case "-p":
        set p_opt		# General PC prediction
	unset f_opt
     breaksw
     case "-s":
        set s_opt		# Include SIGNALP predictions
     breaksw
     case "-g":
        set g_opt		# graphics output
     breaksw
     case "-v":
        setenv v_opt		# verbose output
     breaksw
     case "-h":
        set h_opt		# print help message and exit
     breaksw
     case "-w":
        set w_opt		# called by a WWW server
     breaksw
     default:
        set infile = ($infile $w)
     breaksw
     endsw
end

###############################################################################
# check for auxiliary programs 
###############################################################################

if ( ! -x $AWK ) then
   $ECHO ProP: installation error, AWK not found
   exit -1
else if ( $?g_opt ) then
   if ( ! -x $GNUPLOT ) then
      $ECHO ProP: installation error, GNUPLOT not found
      exit -1
   else if ( ! -x $PPM2GIF ) then
      $ECHO ProP: installation error, PPM2GIF not found
      exit -1
   endif
else if ( $?s_opt ) then
   if ( ! -x $SIGNALP ) then
      $ECHO ProP: installation error, SIGNALP not found
      exit -1
   endif
endif

###############################################################################
# output help messages  
###############################################################################


if ( $?h_opt ) then				# provide help
   $ECHO usage: prop \[-g\] \[-h\] \[-p\] \[-s\] \[-v\] \[file\] ... 
   exit 0
endif

###############################################################################
# check for existence of input files
###############################################################################

foreach f ( $infile )
   if ( ! -e $f ) then				# file not found
      $ECHO prop: \"$f\" not found
      exit -2
   endif
end

###############################################################################
# Set prediction type description text for graphics
###############################################################################
if ( $?g_opt ) then
   if ( $?p_opt ) then
      set predtype = (general PC prediction)
   else
      set predtype = (furin-specific prediction)
   endif
endif

###############################################################################
# Print header in HTML or text
###############################################################################
if ( $?w_opt ) then			# HTML-version
	mkdir $WWWOUT
endif

$ECHO '\n'
$ECHO "         ##### $propversion ProPeptide Cleavage Site Prediction #####"
$ECHO '\n'


if ( $?f_opt ) then			# Furin-type prediction
	$ECHO "         ##### Furin-type cleavage site prediction (Arginine/Lysine residues) #####"
	$ECHO '\n'
endif

if ( $?p_opt ) then			# General/total-type prediction
	$ECHO "         ##### General PC cleavage site prediction (Arginine/Lysine residues) #####"
	$ECHO '\n'
endif

###############################################################################
# Main: read and analyse input, make predictions 
###############################################################################

mkdir ${PROPTMP}
touch ${PROPTMP}/checkfasta
touch ${PROPTMP}/checkfasta.fas
touch ${PROPTMP}/in.all.how
touch ${PROPTMP}/in.all.fas

mkdir $PROPTMP/data

# split multiple FASTA entries into single files in $PROPTMP/data
# perform prediction and output on each file in $PROPTMP/data (if not empty)

$AWK -f ${PROPBIN}/fasta2dir -v OUTDIR=$PROPTMP/data $infile

if ( ! `ls -1 $PROPTMP/data | wc -l` ) then
	$ECHO ProP: no sequences found in \"$infile\", check format
	exit -3
endif

###############################################################################
# for each input sequence ...
###############################################################################
#foreach f ($PROPTMP/data/*)           # [t]csh bug: no * expantion
foreach ff (`\ls $PROPTMP/data`)

   set f = $PROPTMP/data/$ff

   if ( `cat $f | wc -l` == 1 ) then
      # skip if file only has one line (> fasta header)
      $ECHO "ProP: file $f:t invalid or empty"
      $ECHO '\n\n'
      continue	
   endif

   ############################################################################
   # Syntax check and conversion of non-standard characters
   # Prepare files for HOW run
   # Convert file $f to how-format (in.all.how) using script <in2how>
   # 	-in2how converts illegal/non-AA chars to 'X'  
   ############################################################################

   $AWK -f ${PROPBIN}/in2how $f > ${PROPTMP}/in.all.how


   #   $AWK -f ${PROPBIN}/in2how+fasta.awk -v informat=fasta \
   #      -v howout=${PROPTMP}/in.all.how \
   #      -v fastaout=${PROPTMP}/in.all.fas $f
	
   if ( -z ${PROPTMP}/in.all.how ) then			# if empty howfile
      $ECHO "ProP: no input sequence in $f:t"
      $ECHO '\n\n'
      continue
   endif

   ############################################################################
   # 	Run prediction scripts
   ############################################################################

   rm -f ${PROPTMP}/rresults

   if ( $?f_opt ) then
      # predict sites in <in.all.how> using FURIN-specific network
      $PROPBIN/prop_furin ${PROPTMP}/in.all.how > ${PROPTMP}/rresults
   else
      # predict sites in <in.all.how> using GENERAL/TOTAL SET-specific network
      $PROPBIN/prop_total ${PROPTMP}/in.all.how > ${PROPTMP}/rresults
   endif

   ############################################################################
   # If SIGNALP is configured and s_opt given, run signalp
   ############################################################################
   @ signalpnum = 0
   if ( $?s_opt ) then
      set signalpout = (`$SIGNALP -t euk -m nn -trunc 100 $f | grep '^# Most'`)
      if ( $#signalpout ) then
         set signalptxt = `echo $signalpout | sed 's/^[^b]*b/b/'`
	 @ signalpnum = $signalpout[8]
      else
         set signalptxt = none
      endif
   endif

   ############################################################################
   # If VERBOSE option is selected, don't make pretty output -- dump all scores
   ############################################################################

   if ($?v_opt) then
      cat ${PROPTMP}/rresults			
      continue
   endif

   ############################################################################
   # Post-process output scores
   # 	- Make HOW-like output
   # 	- Show sequence window around sites
   ############################################################################

   # Get positions of predicted sites

   set Ppos = \
   `$AWK '/P\*$/{print $2;}' ${PROPTMP}/rresults |tr '\012' ','`
   
   #set Kpos = \
   #`$AWK '/P\*$/{print $2;}' ${PROPTMP}/rresults |tr '\012' ','`
   
   # Produce HOW-like output showing sequence and assignment field
   # with predictions indicated

   if ( $signalpnum ) then			# SIGNALP assignment, if any
      set sppos = 1
      @ i = 2
      while ( $i <= $signalpnum )
            set sppos = ${sppos},$i
            @ i++
      end
      cat ${PROPTMP}/in.all.how | \
         $AWK -v B=${sppos}:s -f $PROPBIN/gethow \
         >${PROPTMP}/in.all.how.tmp
      mv ${PROPTMP}/in.all.how.tmp ${PROPTMP}/in.all.how
   endif

   cat ${PROPTMP}/in.all.how | \
      $AWK -v B=${Ppos}:P -f $PROPBIN/gethow  \
      > ${PROPTMP}/current_pred.how


   ############################################################################
   # Print how-format output, R/K lists + predictions 
   ############################################################################

   # print HOW-format output
   cat ${PROPTMP}/current_pred.how
   $ECHO " "

   if ( $?s_opt ) then
      $ECHO Signal peptide cleavage site 'predicted:\t'$signalptxt
      $ECHO " "
   endif

   @ dubpred = 0
   if ( $?signalpnum ) then
      foreach pp (`$ECHO $Ppos | tr ',' ' '`)
   	 if ( $pp < $signalpnum ) then
     	    @ dubpred++
     	 endif
      end
   endif
   if ( $dubpred > 1 ) then
      set end = s
   else
      set end
   endif
   if ( $dubpred ) then
#      $ECHO 'WARNING:     '$dubpred' propeptide cleavage site'$end predicted
#      $ECHO '               within the predicted signal peptide\n'
       $ECHO WARNING: $dubpred propeptide cleavage site$end \
          within the predicted signal 'peptide\n'
   endif

   # calculate and print number of predicted sites
   set Ppred = `cat ${PROPTMP}/rresults|grep '\*P'|wc -l`
   

   set predspec = (Propeptide cleavage sites predicted:)
	set predspec = (${predspec}'\tArg(R)/Lys(K):' $Ppred)
   $ECHO ${predspec}'\n\n'

   # print print R,K details
   cat ${PROPTMP}/rresults
   $ECHO '\n\n'

   ############################################################################
   # Generate graphics
   ############################################################################

   if ( $?g_opt ) then


      # data for plotting
      touch $PROPTMP/gr.sp.dat
      if ( $signalpnum ) then
         $ECHO $signalpnum 1.3 >$PROPTMP/gr.sp.dat
      else
         $ECHO 0 0 >$PROPTMP/gr.sp.dat
      endif

      $AWK '/\|/{print $2,$4;}' $PROPTMP/rresults >$PROPTMP/gr.pp.dat

      # customize GNUPLOT script
      setenv ENAME `cat ${PROPTMP}/rresults | $AWK '/[\.\*]$/{print $1;exit;}'`

      @ elen = `cat ${PROPTMP}/in.all.how | $AWK 'NR==1{print $1;exit;}'` + 5

      setenv PPM2GIF_F `$ECHO $PPM2GIF | tr '/' '+'`
      setenv PROPTMP_F `$ECHO $PROPTMP | tr '/' '+'`
      cat $PROPETC/template.gnu | \
         sed 's/_PPM2GIF_/'$PPM2GIF_F'/' | \
	 sed 's/_D_/'$PROPTMP_F'/g' | \
	 sed 's/_NAME_/'$ENAME'/g' | \
	 sed 's/_LEN_/'$elen'/g' | \
	 sed "s/_PRED_/$predtype/g" | \
	 sed 's/+/\//g' \
	 >$PROPTMP/custom.gnu

      # plot
      if ( $?w_opt ) then
         ($GNUPLOT $PROPTMP/custom.gnu >$WWWOUT/$ENAME.gif) >&/dev/null

         # hyperlink to the figure
	 $ECHO '<img src="http://www.cbs.dtu.dk/services/ProP-1.0/tmp/'$$/$ENAME.gif'">'
      else
         ($GNUPLOT $PROPTMP/custom.gnu >$ENAME.gif) >&/dev/null
      endif

   endif
   
###############################################################################
end # foreach input sequence ...
###############################################################################

# clean up
cd /
rm -rf $PROPTMP/*
rm -rf $PROPTMP

###############################################################################
# End of script
###############################################################################
