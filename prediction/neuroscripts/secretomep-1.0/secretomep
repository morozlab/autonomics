#! /bin/tcsh -f

# SecretomeP 1.0
# 
# VERSION	30 Mar 2005	1.0c
# 		15 Sep 2005	1.0f
# 		28 Aug 2009	1.0g	documentation update, no other changes

###############################################################################
#       GENERAL SETTINGS, CUSTOMIZE TO YOUR SITE
###############################################################################

# full path to SecretomeP directory
setenv	PFUN	/srv/data2/pipeline/prediction/neuroscripts/secretomep-1.0

# determine platform (do not change this unless you don't have 'uname'!)
setenv	SYSTEM	`uname -s`

# available cpu:s (multiprocessor systems only)
setenv	MAXCPU	64

# configure auxiliary software (see installation instructions)
if (( `uname` == "IRIX" ) || ( `uname` == "IRIX64" )) then

   setenv ECHO	/sbin/echo
   setenv AWK	/usr/freeware/bin/gawk
   setenv PERL	/usr/bin/perl

   set prop	= /usr/cbs/bio/bin/prop
   set psort	= /usr/cbs/bio/bin/psort
   set seg	= /usr/cbs/bio/bin/irix64/seg
   set tmhmm	= /usr/cbs/bio/bin/tmhmm
   set signalp	= /usr/cbs/bio/bin/signalp

else if ( `uname` == "Linux" ) then

   setenv ECHO	"/bin/echo -e"
   setenv AWK	/usr/bin/gawk
   setenv PERL	/usr/bin/perl

   set prop	= /srv/data2/pipeline/prediction/neuroscripts/prop-1.0c/prop
   set psort	= /srv/data2/pipeline/prediction/neuroscripts/psort/psort
   set seg	= /srv/data2/pipeline/prediction/neuroscripts/seg/seg
   set tmhmm	= /srv/data2/pipeline/prediction/neuroscripts/tmhmm-2.0c/bin/tmhmm
   set signalp	= /srv/data2/pipeline/prediction/neuroscripts/signalp-3.0/signalp

endif

###############################################################################
#       OTHER SETTINGS: NOTHING SHOULD NEED CHANGING BELOW THIS LINE!
###############################################################################

# validate custom settings
if ( ! $?PFUN ) then					# mandatory: PFUN
   echo secretomep: PFUN must be set
   exit 1
else if ( ! -d $PFUN) then
   echo secretomep: cannot find PFUN in $PFUN
   exit 1
endif

if ( ! $?MAXCPU ) then					# mandatory: MAXCPU
   setenv MAXCPU 1
else if ( `echo $MAXCPU | tr -d '[0-9]' | wc -c` > 1 ) then
   echo secretomep: MAXCPU must be a positive integer
   exit 1
else if ( $MAXCPU == 0 ) then
   echo secretomep: MAXCPU must be a positive integer
   exit 1
endif

if ( ! $?ECHO ) then                                    # mandatory: ECHO
   echo secretomep: ECHO must be set
   exit 1
else if ( "$ECHO" != "echo" ) then
   if ( ! -x `echo $ECHO | sed 's/ .*//'` ) then
      echo secretomep: cannot execute \"$ECHO\" as ECHO
      exit 1
endif

if ( ! $?AWK ) then                                     # mandatory: AWK
   $ECHO secretomep: AWK must be set
   exit 1
else if ( ! -x $AWK ) then
   $ECHO secretomep: cannot execute \"$AWK\" as AWK
   exit 1
endif

if ( ! $?PERL ) then					# mandatory: PERL
   $ECHO secretomep: PERL must be set
   exit 1
else if ( ! -x $PERL ) then
   $ECHO secretomep: cannot execute \"$PERL\" as PERL
   exit 1
endif

if ( ! $?prop ) then					# mandatory: prop
   $ECHO secretomep: prop must be set
   exit 2
else if ( ! -x $prop ) then
   $ECHO secretomep: cannot execute \"$prop\" as prop
   exit 2
endif

if ( ! $?psort ) then					# mandatory: psort
   $ECHO secretomep: psort must be set
   exit 2
else if ( ! -x $psort ) then
   $ECHO secretomep: cannot execute \"$psort\" as psort
   exit 2
endif

if ( ! $?seg ) then					# mandatory: seg
   $ECHO secretomep: seg must be set
   exit 2
else if ( ! -x $seg ) then
   $ECHO secretomep: cannot execute \"$seg\" as seg
   exit 2
endif

if ( ! $?tmhmm ) then					# mandatory: tmhmm
   $ECHO secretomep: tmhmm must be set
   exit 2
else if ( ! -x $tmhmm ) then
   $ECHO secretomep: cannot execute \"$tmhmm\" as tmhmm
   exit 2
endif

# custom settings OK

# local settings
setenv	PFUNBIN	$PFUN/bin
setenv	PFUNDAT	$PFUN/dat
setenv	PFUNCAL	$PFUN/cal
setenv	PFUNROC	$PFUN/roc
setenv	PFUNSYN	$PFUN/syn
setenv	PFUNTMP	$PFUN/tmp/$$

setenv	VER	1.0g
setenv	VERDATE	"Aug 2009"

setenv  LANG    C				# else AWK will not work ...

set	minl	= 40				# shortest seq. length allowed
set	maxl	= 4000				# longest

@	progs	= 6				# default: run SignalP

set	s_opt					# default: sort alphabetically

###############################################################################
##	called correctly?                                                    ##
###############################################################################
set infile = ()
while ( $#argv )
   switch ($1)
   case '-nosp'				# -nosp	do not run SignalP
      @ progs = 5
   breaksw
   case '-s'				# -s	sort output by NN-score
      set s_opt = (-rn +1 -2)
   breaksw
   case '-v'				# -v	report progress
      set v_opt
   breaksw
   case '-V'				# -V	report version and release date
      set V_opt
   breaksw
   default:
      set infile = ($infile $1)
   breaksw
   endsw
   shift
end

# version info
if ( $?V_opt ) then
   $ECHO SecretomeP $VER, $VERDATE
   exit
endif

# verbosity
#alias	out2err	"$AWK -v V=$?v_opt -v RS='@' -f $PFUNBIN/out2err"
if ( $?v_opt ) then
   alias out2err 'sh -c "cat 1>&2"'
else
   alias out2err 'cat >/dev/null'
endif

# signal peptide prediction
if ( $progs == 6 ) then
   if ( ! $?signalp ) then
      @ progs = 5
      $ECHO secretomep: warning - SignalP executable not specified
   else if ( ! -x $signalp ) then
      @ progs = 5
      $ECHO secretomep: warning - cannot execute SignalP
   endif
endif

# input files
foreach f ($infile)
   if ( ! -e $f ) then				# cannot open input file
      $ECHO secretomep: cannot open \"$f\"
      exit -1
   endif
end

mkdir $PFUNTMP			### Ol Korrekt ... ###


###############################################################################
##	scan input sequences                                                 ##
###############################################################################
$AWK -v OUTDIR=$PFUNTMP/data.dir -v OUTPUTFORMAT=fasta -v MAXNAMELEN=11 \
     -v P=A -v V=1 -v X=0 -v B=$minl -v T=$maxl -f $PFUNBIN/seq2seq.awk $infile

# count approved entries
set ec = `ls -1 $PFUNTMP/data.dir | wc -l`

if ( ! $ec ) then
   $ECHO secretomep: no valid sequences found in \"$infile\", \
	check for illegal symbols
   cd /
   rm -rf $PFUNTMP
   exit -2
endif


###############################################################################
##	configure raw data generation                                        ##
###############################################################################
cd $PFUNTMP

# define the programs to run
set pcmd = ( "$AWK" "$prop" "$psort" "$seg" "$tmhmm" "$signalp" )

# define the corresponding command line options and output names
set ppref = ("-f $PFUN/bin/allprot" "" "" "" "-noplot" \
	"-t euk -m nn -trunc 60 -short")
set psuff = ("" "" "" "-a" "" "")
set pname = (allprot prop psort seg tmhmm signalp)

# create output dirs
foreach d ($pname)
   mkdir data_$d.dir
end


###############################################################################
##	generate raw data                                                    ##
###############################################################################
$ECHO '\nGenerating raw data,' $ec sequences | out2err

# dir for current procs
mkdir proc

# outer loop: sequence files
@ i = 0
foreach f ( data.dir/* )

   @ i++
   $ECHO -n $i $f:t | $AWK '{printf("\n\t%4d  %-15s  ",$1,$2);}' | out2err
   @ pnum = 0

   # inner loop: raw feature programs
   while ( $pnum < $progs )
      @ pnum++
      $ECHO -n '.' | out2err

      # submit, RUNRAW style
      (touch proc/$pname[$pnum].$f:t; \
       $pcmd[$pnum] $ppref[$pnum] $f $psuff[$pnum] \
          >& data_$pname[$pnum].dir/$f:t; \
       rm proc/$pname[$pnum].$f:t &) >&/dev/null

      # mind the load
      if ( $MAXCPU == 1 ) then
         set allow_par = 0			# 1 CPU, no parallel jobs
      else
         set allow_par = \
	    `uptime | tr -d ',' | $AWK -v M=$MAXCPU '{print int(M-$(NF-2));}'`
      endif
      if ( $allow_par < 0 ) set allow_par = 0

      while ( `ls -1 proc |& wc -l` > $allow_par )			
         sleep 2
      end

   end # inner loop: raw feature programs

end # outer loop: sequence files

# make sure no processes are running
$ECHO -n '\n\nWaiting for all processes to terminate: ' | out2err
while ( `ls -1 proc |& wc -l` )
   $ECHO -n . | out2err
   sleep 1
end
$ECHO ' done, raw data generated' | out2err

# concatenate raw results
foreach d ( data_*.dir )

   if ( `ls $d | wc -l` == 0 ) continue

   foreach f ( $d/* )
      $ECHO '\n//-//' $f:t >> $d:r		# preamble, RUNRAW style
      cat $f >> $d:r
   end
end

# all raw data is now in $PFUNTMP/data_*


###############################################################################
##	process raw data: parse and normalize                                ##
###############################################################################
cd $PFUNTMP

# prepare: reset 'data.Features', just in case
setenv PFUNF $PFUNTMP/data.Features
rm -rf $PFUNF
mkdir $PFUNF

# prepare: create directories, copy normalization data
foreach p ($PFUN/parsers/*)		# for each parser installed
  
   foreach f ($p/*)
      if ( -d $f ) then			# directories with feature info
         cp -r $f $PFUNF/$f:t
         touch $PFUNF/$f:t/feature.out
      endif
   end

end

# parse data
foreach rf ( allprot prop psort seg tmhmm )	# for each raw feature

  $ECHO -n '\nParsing' $rf'\t' | out2err
  $AWK -v fileid=$PFUNTMP/data -f $PFUN/parsers/$rf/Process.server \
	$PFUNTMP/data_$rf |& out2err

end
$ECHO "" | out2err

# normalize data 
foreach f ($PFUNTMP/data.Features/*)		# for each feature
   $ECHO -n '\nNormalizing' $f:t | out2err
   $AWK -f $PFUNBIN/normalize.awk -v feature=$f > $f/feature.norm.out
end


###############################################################################
##	generate HOWLIN file                                                 ##
###############################################################################
$ECHO -n "\n\nMerging features" | out2err

($AWK -f $PFUNBIN/merge.awk $PFUNTMP/data \
	allprot_natom \
	allprot_npos \
	prop_vect_5d \
	psort_vect \
	seg_vect_5d \
	tmhmm_5d > $PFUNTMP/secretome.howlin) \
   |& sh -c "tee -a $PFUNTMP/error.log 1>&2"

if ( -z $PFUNTMP/secretome.howlin ) then
   $ECHO "Unable to create "secretome \
      | sh -c "tee -a $PFUNTMP/error.log 1>&2"
endif


###############################################################################
##	run HOWLIN                                                           ##
###############################################################################
$ECHO -n '\n\nPredicting' | out2err

set lc = `cat secretome.howlin | wc -l`		# line count in HOWLIN file
foreach m (1 2 3 4 5)
   (rm -f secretome.$m.syn; ln -s $PFUNSYN/secretome.$m.syn .; \
    sed 's/__NUMT__/'$lc'/;s/__NUMR__/'$m'/' $PFUNDAT/secretome.dat \
    | $PFUNBIN/howlin_$SYSTEM > secretome.$m.run) \
      |& sh -c "tee -a $PFUNTMP/error.log 1>&2"
   if ( -z $PFUNTMP/secretome.$m.run ) then
      $ECHO "Unable to create secretome.$m.run" \
         | sh -c "tee -a $PFUNTMP/error.log 1>&2"
   endif
end


###############################################################################
##	post-process HOWLIN output                                           ##
###############################################################################
$ECHO -n '\n\nPostprocessing' | out2err

foreach m (1 2 3 4 5)
   $PERL $PFUNBIN/postprocess secretome.$m.run secretome.howlin \
	$PFUNCAL/secretome.pcurve \
      >$PFUNTMP/secretome.$m.pscore
   if ( -z secretome.$m.pscore ) then
      $ECHO "Unable to create secretome.$m.pscore" \
         | sh -c "tee -a $PFUNTMP/error.log 1>&2"
   endif
end

$AWK -f $PFUNBIN/doavg.awk secretome.?.pscore >secretome.pscore


###############################################################################
##	prepare results                                                      ##
###############################################################################

# extract the secretome network scores for all 5 networks
foreach i (1 2 3 4 5)
   $AWK '/^ #/{print $7;}' secretome.$i.run > secretome.$i.nn
end

# calculate averages
paste secretome.?.nn | $AWK '{print ($1+$2+$3+$4+$5)/5}' > secretome.nn

### .nn file syntax: one line per input sequence <float>;
###                  the order is defined by the 'secretome.howlin' file.

# get 'signalp' output
if ( -e data_signalp ) then
   $AWK 'NF==14 { print $1,$NF; }' data_signalp >signalp.out
else
   ls -1 data.dir | sed 's/$/ 0/' >signalp.out
endif

### signalp.out syntax: one line per input sequence <seqid> <answer>;
###                     <answer> is 'Y', 'N' or '0' (= signalp not run)
###                     the order is alphabetical, by <seqid>.

# get odds
$AWK -v tmpdir=$PFUNTMP -v datadir=$PFUNDAT -f $PFUNBIN/prettyprint.awk \
   | grep Secreted >pretty.out


###############################################################################
##	print results                                                        ##
###############################################################################
$ECHO '\n\nPrinting results' | out2err

$ECHO '\n# SecretomeP' $VER predictions

# print result table head
$ECHO '\n# Name\t       NN-score  Odds   Weighted   Warning'
$ECHO '# \t\t\t\tby prior'
$ECHO -n '# ===================================='
$ECHO '========================================='

# print result table contents
$AWK '{print $NF;}' secretome.howlin \
   | paste - secretome.nn pretty.out \
   | $AWK -f $PFUNBIN/print.awk #\
   | sort $s_opt

# print result table foot
$ECHO -n '# ===================================='
$ECHO '========================================='


###############################################################################
##	cleanup                                                              ##
###############################################################################
cd /
rm -rf $PFUNTMP


# end of script ===============================================================
