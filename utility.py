'''
Author: Mathew Citarella

This module contains a small set of non-network based utility methods. More 
methods will be added to the module as needed by the project.
'''

import datetime
import re

nonstandard_reg = re.compile("(?i)b|[def]|[h-s]|[u-z]")

def convert_if_int(s):
    ''' s:
            String to convert.

        Returns int(s) if s can be cast as an integer, s otherwise.
    '''
    try:
        return int(s)
    except ValueError:
        return s


def attr_or_default(obj, attr_name, default=None):
    '''
        This method tries to get 'attr_name' from obj using the getattr method.
        If this act raises an exception, the method returns default instead.
    '''
    try:
        return getattr(obj, 'attr_name')
    except:
        return default


def generate_time_string():
    '''
        Returns a string generated by doing a simple transformation on 
        datetime.datetime.now().
        
        Returned string format:
            year + month + day + hour + minute + second
    '''
    t = datetime.datetime.now()
    name = str(t.year) + str(t.month) + str(t.day) + str(t.hour) +\
     str(t.minute) + str(t.second)
    return name
        

def replace_nonstandard_bases(seq, repl="N"):
    ''' seq:
            Replace non-standard bases in this sequence.

        repl:
            Character that each matching non-standard base should be replaced 
            with. Defaults to "N".

        This method uses the module-level regex nonstandard_reg to search for 
        and replace characters from the string seq that aren't either an A, T, 
        C, or G.

    '''
    return nonstandard_reg.sub(repl, seq)


def die_on_error(status_code, cmd_str=None):
    ''' status_code (int):
            Status code obtained from either a subprocess.Popen object or a 
            multiprocessing.Process object.

        cmd_str (str):
            Command that was used to fork the process. If present, and there 
            was an error, this method will print the cmd_str.

        Raises a genertic Exception if status_code is not zero. Will use 
        cmd_str as the message if present.

    '''

    if(status_code is None):
        return

    if(status_code != 0):
        m = "Error status code received."
        #optionally print the cmd_str causing the error
        if(not cmd_str is None):
            m = " ".join(["Status code: ", str(status_code), " produced by: ", cmd_str])
        #propogate the status code
        raise Exception(m)


def row2dict(db_row):
    '''
        Converts a SQLAlchemy RowProxy object into a dictionary, where the 
        keys of the dictionary are fields of the database and the values 
        stored at the key are the values from the database.
        
        Returns the dictionary.
    '''
    ret = {}
    for column in db_row.keys():
        ret[column] = getattr(db_row, column)

    return ret
